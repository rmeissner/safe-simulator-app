{"version":3,"sources":["logic/sapp/safeAppsSDK.ts","logic/injected/ethereum.ts","logic/simulation/processor.ts","logic/service/register.ts","logic/service/details.ts","components/simulation/results/Logs.tsx","components/simulation/results/Call.tsx","components/simulation/results/Calls.tsx","components/simulation/results/StorageChanges.tsx","components/simulation/results/CallTree.tsx","components/simulation/SimulationResults.tsx","components/MultisigTransaction.tsx","components/simulation/Simulation.tsx","routes/SimulationRoute.tsx","logic/service/list.ts","components/transactions/TransactionList.tsx","routes/DashboardRoute.tsx","App.tsx","logic/sapp/hooks.ts","reportWebVitals.ts","index.tsx"],"names":["appsSdk","SafeAppsSDK","sleep","timeout","value","Promise","cb","setTimeout","checkIsSafeApp","a","any","safe","getInfo","safeInfo","getSafeInfo","getChainId","chainId","safeAppsProvider","SafeAppProvider","safeAddress","parseInt","threshold","owners","eip1193Provider","window","ethereum","ethereumProvider","undefined","ethers","providers","Web3Provider","getNetwork","Error","captureStackTrace","console","log","baseOptions","db_path","gasLimit","gasPrice","vmErrorsOnRPCResponse","logging","quiet","verbose","debug","buildSimulationEnv","provider","targetBlock","options","db","memdown","fork","fork_block_number","network","Ganache","connector","GanacheCoreConnector","simulator","Simulator","buildAnalyzer","callHandler","CallHandler","storageHandler","StorageHandler","handlers","analyzer","HandlerAnalyzer","simulateTx","safeTx","simulationEnv","holder","infoProvider","SafeInfoProvider","loadInfo","simulateMultiSigTransaction","txHash","getTransactionReceipt","txReceipt","success","status","logs","callTree","roots","calls","storageChanges","availableServices","getServiceForChainId","service","toString","loadTxDetails","safeTxHash","serviceUrl","axios","get","resp","data","decodeEvent","decodeLog","loadEventSignatures","Logs","useState","displayLogs","setDisplayLogs","useEffect","all","map","decoded","length","address","description","primary","signature","params","p","results","Box","Accordion","AccordionSummary","AccordionDetails","sx","textAlign","decodeReturnData","decodeFunctionData","loadFunctionSignatures","join","decodeData","buildDescription","label","ether","utils","formatEther","Call","call","children","displayCall","setDisplayCall","slice","details","returnData","e","error","to","Typography","width","wordWrap","Calls","StorageChanges","changes","decode","displayChanges","setDisplayChange","storageSlots","forEach","change","c","decodeSafeStorageChange","slot","storageChange","history","push","valueDecoded","slotName","Tooltip","title","Fragment","CallTree","tree","element","type","SimulationResults","targetCalls","otherCalls","caller","target","targetChanges","otherChanges","paddingTop","color","MultisigTx","onSelected","justifyContent","flexDirection","display","alignItems","nonce","isExecuted","Button","onClick","operation","safeTxGas","baseGas","gasToken","refundReceiver","Simulation","connectedToSafe","runExecutionOnOriginalBlock","setRunExecutionOnOriginalBlock","simulationProgress","setSimulationProgress","setSafeTx","setResults","onSimulateTx","useCallback","useLatestBlock","safeAppsChainId","injectedChainId","executionTransactionHash","transactionHash","ethersProvider","getTransaction","executionTx","preExecutionBlock","blockNumber","getStorageAt","simulationResults","Switch","checked","onChange","useExecutionBlock","disabled","CircularProgress","marginTop","SimulationRoute","useParams","navigate","useNavigate","loadMultisigTxs","url","TransactionList","moreUrl","setMoreUrl","loading","setLoading","multisigTxs","setMultisigTxs","loadMultisigTransactions","txs","addressParts","split","cleanSafe","getAddress","nextTxs","next","concat","tx","variant","LAST_SAFE_STORAGE_KEY","DashboardRoute","localStorage","getItem","setSafe","safeTxHashInput","setSafeTxHashInput","TextField","setItem","selectSafe","marginRight","App","isSafeApp","setIsSafeApp","checkSafeApp","useIsSafeApp","hasProvider","className","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebeeaf68.chunk.js","sourcesContent":["import SafeAppsSDK, { SafeInfo } from '@gnosis.pm/safe-apps-sdk';\nimport { SafeAppProvider } from '@gnosis.pm/safe-apps-provider';\n\nconst appsSdk = new SafeAppsSDK();\n\nconst sleep = <T>(timeout: number, value?: T) => new Promise<T | undefined>((cb) => setTimeout(() => cb(value), timeout))\n\nexport const checkIsSafeApp = async(): Promise<boolean> => {\n    const safeInfo = await Promise.any([appsSdk.safe.getInfo(), sleep(1000, false)])\n    return safeInfo !== false\n}\n\nexport const getSafeInfo = (): Promise<SafeInfo> => {\n    return appsSdk.safe.getInfo()\n}\n\nexport const getChainId = async(): Promise<number> => {\n    return (await getSafeInfo()).chainId\n}\n\nexport const safeAppsProvider = (chainId: string) => {\n    return new SafeAppProvider({ safeAddress: \"\", chainId: parseInt(chainId), threshold: 0, owners: [] }, appsSdk)\n}","import { ethers } from \"ethers\";\n\ndeclare let window: any;\n\nexport const hasInjectedProvider = () => !!window.ethereum\n\nexport const eip1193Provider = (): ethers.providers.ExternalProvider => {\n    return window.ethereum\n}\n\nlet ethereumProvider: ethers.providers.Web3Provider | undefined = undefined\nexport const ethersProvider = () => {\n    if (!ethereumProvider)\n        ethereumProvider = new ethers.providers.Web3Provider(eip1193Provider())\n    return ethereumProvider\n}\n\nexport const getChainId = async () => {\n    return (await ethersProvider().getNetwork()).chainId\n}","import { ethers } from 'ethers'\nimport memdown from 'memdown'\nimport Ganache from 'ganache-core'\nimport Simulator, { CallElement, CallHandler, EvmConnector, ExtendedCallParams, GanacheCoreConnector, HandlerAnalyzer, MultisigTransaction, SafeInfo, SafeInfoProvider, StepHandler, StorageHandler } from '@rmeissner/safe-simulator'\n\n// Because FIREFOX and IE suck\nif (Error.captureStackTrace === undefined) {\n    console.log(\"Fix captureStackTrace\")\n    Error.captureStackTrace = function () {}\n}\n\nconst baseOptions: any = { db_path: \"/\", gasLimit: 100_000_000, gasPrice: \"0x0\", vmErrorsOnRPCResponse: false, logging: { quiet: true, verbose: false, debug: false } }\n\nconst buildSimulationEnv = (provider: any, targetBlock: string | number): SimulationEnv => {\n    const options = baseOptions\n    options.db = memdown()\n    options.fork = provider\n    options.fork_block_number = targetBlock\n    const network = Ganache.provider(options)\n    const connector = new GanacheCoreConnector(network)\n    const simulator = new Simulator(connector)\n    return {\n        connector,\n        simulator\n    }\n}\n\nconst buildAnalyzer = () => {\n    const callHandler = new CallHandler()\n    const storageHandler = new StorageHandler()\n    const handlers: StepHandler[] = [\n        callHandler,\n        storageHandler\n    ]\n    const analyzer = new HandlerAnalyzer(handlers)\n    return {\n        analyzer,\n        callHandler,\n        storageHandler\n    }\n}\n\nexport interface SimulationEnv {\n    connector: EvmConnector,\n    simulator: Simulator\n}\n\nexport interface SimulationResult {\n    simulationEnv: SimulationEnv,\n    success: boolean,\n    logs: ethers.providers.Log[],\n    callTree: CallElement[],\n    calls: Map<string, ExtendedCallParams[]>,\n    storageChanges: Map<string, any[]>,\n    safeAddress: string,\n    safeInfo: SafeInfo\n}\n\nexport const simulateTx = async (network: ethers.providers.ExternalProvider, safeTx: MultisigTransaction, targetBlock: string | number, simulationEnv?: SimulationEnv) => {\n    const holder: SimulationEnv = simulationEnv || buildSimulationEnv(network, targetBlock)\n    const provider = new ethers.providers.Web3Provider(holder.connector as any)\n    const infoProvider = new SafeInfoProvider(provider)\n    const safeInfo = await infoProvider.loadInfo(safeTx.safe)\n    const { analyzer, callHandler, storageHandler } = buildAnalyzer()\n    const txHash = await holder.simulator.simulateMultiSigTransaction(safeInfo, safeTx, analyzer)\n    const txReceipt = await provider.getTransactionReceipt(txHash)\n    return {\n        simulationEnv: holder,\n        success: txReceipt.status === 0 ? false : true,\n        logs: txReceipt.logs,\n        callTree: callHandler.roots,\n        calls: callHandler.calls,\n        storageChanges: storageHandler.storageChanges,\n        safeAddress: safeTx.safe,\n        safeInfo\n    }\n}","export const availableServices: Record<string, string> = {\n    \"1\": \"https://safe-transaction.mainnet.gnosis.io\",\n    \"4\": \"https://safe-transaction.rinkeby.gnosis.io\",\n    \"5\": \"https://safe-transaction.goerli.gnosis.io\",\n    \"10\": \"https://safe-transaction.optimism.gnosis.io\",\n    \"100\": \"https://safe-transaction.xdai.gnosis.io\",\n    \"137\": \"https://safe-transaction.polygon.gnosis.io\",\n    \"42161\": \"https://safe-transaction.arbitrum.gnosis.io\",\n    \"43114\": \"https://safe-transaction.avalanche.gnosis.io\",\n    \"1313161554\": \"https://safe-transaction.aurora.gnosis.io\"\n}\n\nexport const getServiceForChainId = (chainId: string | number): string => {\n    const service = availableServices[chainId.toString()]\n    if (!service) throw Error(\"No service available\")\n    return service\n}","import axios from \"axios\"\nimport { getServiceForChainId } from \"./register\"\nimport { ServiceMultisigTransaction } from \"./types\"\n\nexport const loadTxDetails = async(chainId: string, safeTxHash: string): Promise<ServiceMultisigTransaction> => {\n    const serviceUrl = getServiceForChainId(chainId)\n    const resp = await axios.get<ServiceMultisigTransaction>(`${serviceUrl}/api/v1/multisig-transactions/${safeTxHash}/`)\n    if (resp.status !== 200) throw Error(\"Could not load details\")\n    return resp.data\n}","import { Accordion, AccordionDetails, AccordionSummary } from \"@mui/material\"\nimport { Box } from \"@mui/system\"\nimport { decodeLog, EventDecodingResult, loadEventSignatures } from \"@rmeissner/safe-simulator\"\nimport { ethers } from \"ethers\"\nimport { useEffect, useState } from \"react\"\n\nexport interface Props {\n    logs: ethers.providers.Log[]\n}\n\ninterface DisplayLog {\n    address: string,\n    description: string\n    params?: string[]\n}\n\nconst decodeEvent = async (log: ethers.providers.Log): Promise<EventDecodingResult[]> => {\n    try {\n        return await decodeLog(log, loadEventSignatures)\n    } catch (e) {\n        return []\n    }\n}\n\nconst Logs: React.FC<Props> = ({ logs }) => {\n    const [displayLogs, setDisplayLogs] = useState<DisplayLog[]>([])\n    useEffect(() => {\n        (async () => {\n            const results = await Promise.all(logs.map(async (log) => {\n                const decoded = await decodeEvent(log)\n                if (decoded.length === 0) {\n                    return {\n                        address: log.address,\n                        description: \"Unknown event\",\n                    }\n                }\n                const primary = decoded[0]\n                return {\n                    address: log.address,\n                    description: primary.signature,\n                    params: primary.decoded.map((p) => p.toString())\n                }\n            }))\n            setDisplayLogs(results)\n        })()\n    }, [logs, setDisplayLogs])\n    return (<Box>\n        {displayLogs.length === 0 && <h4>No events have been emitted</h4>}\n        {displayLogs.map((log) => (<Accordion>\n            <AccordionSummary>{log.description}</AccordionSummary>\n            <AccordionDetails sx={{ textAlign: \"left\" }}>\n                emitted by<br />\n                <b>{log.address}</b><br />\n                <br />\n                Parameters:<br />\n                {log.params?.map((p) => (<>{p}<br /></>))}\n            </AccordionDetails>\n        </Accordion>))}\n    </Box>)\n}\n\nexport default Logs","import { Accordion, AccordionDetails, AccordionSummary, Typography } from \"@mui/material\"\nimport { decodeFunctionData, ExtendedCallParams, FunctionDecodingResult, loadFunctionSignatures } from \"@rmeissner/safe-simulator\"\nimport { ethers } from \"ethers\"\nimport { useEffect, useState } from \"react\"\n\nexport interface Props {\n    label?: string,\n    call: ExtendedCallParams\n}\n\ninterface DisplayCall {\n    description: string,\n    details: ExtendedCallParams,\n    returnData?: string\n    params?: string[]\n}\n\nconst decodeReturnData = async (data: string): Promise<string | undefined> => {\n    try {\n        const decoded = await decodeFunctionData(data, loadFunctionSignatures)\n        if (decoded.length === 0) return data\n        return decoded[0].decoded.join(\",\")\n    } catch (e) {\n        return data\n    }\n}\n\nconst decodeData = async (data: string): Promise<FunctionDecodingResult[]> => {\n    try {\n        return await decodeFunctionData(data, loadFunctionSignatures)\n    } catch (e) {\n        return []\n    }\n}\n\nconst buildDescription = (label: string, value: string): string => {\n    const ether = ethers.utils.formatEther(value)\n    return ether === \"0.0\" ? label : `${label} - ${ether}`\n}\n\nconst Call: React.FC<Props> = ({ label, call, children }) => {\n    const [displayCall, setDisplayCall] = useState<DisplayCall | undefined>(undefined)\n    useEffect(() => {\n        try {\n            (async () => {\n                const decoded = await decodeData(call.data)\n                if (decoded.length === 0) {\n                    const displayCall = {\n                        description: buildDescription(call.data.slice(0, 10), call.value),\n                        details: call\n                    }\n                    setDisplayCall(displayCall)\n                } else {\n                    const primary = decoded[0]\n                    const returnData = call.returnData ? await decodeReturnData(call.returnData) : undefined\n                    const displayCall = {\n                        description: buildDescription(primary.signature, call.value),\n                        details: call,\n                        returnData,\n                        params: primary.decoded.map((p) => p.toString())\n                    }\n                    setDisplayCall(displayCall)\n                }\n            })()\n        } catch (e) {\n            console.error(e)\n        }\n    }, [call, setDisplayCall])\n    if (!displayCall) return <></>\n    return (<Accordion>\n        <AccordionSummary>{label && (<>{label} - </>)}{displayCall.description}</AccordionSummary>\n        <AccordionDetails>\n            To: {displayCall.details.to}<br /><br />\n            Value: {ethers.utils.formatEther(displayCall.details.value)}<br /><br />\n            {displayCall.params && (<>\n                Parameters:<br />\n                {displayCall.params.map((p) => (\n                    <Typography sx={{\n                        width: '100%',\n                        textAlign: 'start',\n                        wordWrap: 'break-word'\n                    }}>{p}<br /></Typography>\n                ))}\n            </>)}\n            <br />\n            Raw data:<br />\n            <Typography sx={{\n                width: '100%',\n                textAlign: 'start',\n                wordWrap: 'break-word'\n            }}>{displayCall.details.data}</Typography><br />\n            {displayCall.returnData && (<>\n                Return data:<br />\n                <Typography sx={{\n                    width: '100%',\n                    textAlign: 'start',\n                    wordWrap: 'break-word'\n                }}>{displayCall.returnData}</Typography><br />\n            </>)}\n            {children}\n        </AccordionDetails>\n    </Accordion>)\n}\n\nexport default Call","import { Box } from \"@mui/system\"\nimport { ExtendedCallParams } from \"@rmeissner/safe-simulator\"\nimport Call from \"./Call\"\n\nexport interface Props {\n    calls: ExtendedCallParams[]\n}\n\nconst Calls: React.FC<Props> = ({ calls }) => {\n    return (<Box>\n        {calls.map((call) => (<Call call={call} />))}\n    </Box>)\n}\n\nexport default Calls","import { Accordion, AccordionDetails, AccordionSummary, Tooltip } from \"@mui/material\"\nimport { Box } from \"@mui/system\"\nimport { DecodedStorageChange, decodeSafeStorageChange, StorageChange } from \"@rmeissner/safe-simulator\"\nimport React, { useEffect, useState } from \"react\"\n\nexport interface Props {\n    changes: StorageChange[]\n    decode?: boolean\n}\n\ninterface DisplayStorageChanges {\n    description: string,\n    value: string,\n    history: string[]\n}\n\nconst StorageChanges: React.FC<Props> = ({ changes, decode }) => {\n    const [displayChanges, setDisplayChange] = useState<DisplayStorageChanges[]>([])\n    useEffect(() => {\n        const storageSlots: string[] = []\n        const storageChanges: Record<string, DisplayStorageChanges> = {}\n        try {\n            changes.forEach((change) => {\n                const c: DecodedStorageChange = decode === false ? change :decodeSafeStorageChange(change)\n                if (!storageChanges[c.slot]) {\n                    storageSlots.push(c.slot)\n                    storageChanges[c.slot] = {\n                        description: c.slotName || c.slot,\n                        value: c.valueDecoded?.toString() || c.value,\n                        history: []\n                    }\n                } else {\n                    const storageChange = storageChanges[c.slot]\n                    storageChange.history.push(storageChange.value)\n                    storageChange.value = c.valueDecoded?.toString() || c.value\n                }\n            })\n        } catch (e) {\n            console.error(e)\n        }\n        setDisplayChange(storageSlots.map((slot) => storageChanges[slot]))\n    }, [changes, setDisplayChange])\n\n    return (<Box>\n        {displayChanges.map((change) => (<Accordion>\n            <AccordionSummary>{change.description}</AccordionSummary>\n            <AccordionDetails>\n                New value {change.history.length > 0 && (<Tooltip title={<React.Fragment>\n                    {change.history.map((change) => <>{change}<br /></>)}\n                </React.Fragment>}><i>({change.history.length} more changes)</i></Tooltip>)}:<br />\n                <b>{change.value}</b>\n            </AccordionDetails>\n        </Accordion>))}\n    </Box>)\n}\n\nexport default StorageChanges","import { Box } from \"@mui/system\"\nimport { CallElement, ExtendedCallParams } from \"@rmeissner/safe-simulator\"\nimport Call from \"./Call\"\n\nexport interface Props {\n    tree: CallElement[]\n}\n\ninterface DisplayCall {\n    description: string,\n    details: ExtendedCallParams,\n    returnData?: string\n    params?: string[]\n}\n\nconst CallTree: React.FC<Props> = ({ tree }) => {\n    if (tree.length === 0) return <></>\n    return <Box>\n        {tree.map((element) => (\n            <Call label={element.type} call={element.params}>\n                <CallTree tree={element.children} />\n            </Call>)\n        )}\n    </Box>\n}\n\nexport default CallTree","import { Box } from \"@mui/system\"\nimport { SimulationResult } from \"../../logic/simulation/processor\"\nimport Logs from './results/Logs'\nimport Calls from './results/Calls'\nimport StorageChanges from './results/StorageChanges'\nimport { Accordion, AccordionDetails, AccordionSummary, Typography } from \"@mui/material\"\nimport CallTree from \"./results/CallTree\"\n\nexport interface Props {\n    results: SimulationResult\n}\n\nconst SimulationResults: React.FC<Props> = ({ results }) => {\n\n    const targetCalls = results.calls.get(results.safeAddress)\n    const otherCalls = []\n    for (const [caller, calls] of results.calls) {\n        if (caller !== results.safeAddress)\n            otherCalls.push({\n                target: caller,\n                calls\n            })\n    }\n\n    const targetChanges = results.storageChanges.get(results.safeAddress)\n    const otherChanges = []\n    for (const [holder, changes] of results.storageChanges) {\n        if (holder !== results.safeAddress)\n            otherChanges.push({\n                target: holder,\n                changes\n            })\n    }\n\n    return (<>\n        <Box sx={{ paddingTop: \"8px\" }}>\n            <h3>Status:</h3>\n            {results.success ? (<Typography sx={{ color: \"green\" }}>Success</Typography>) : (<Typography sx={{ color: \"red\" }}>Failure</Typography>)}\n        </Box>\n        {targetCalls && (<>\n            <Box sx={{ paddingTop: \"8px\" }}>\n                <h3>Calls from target Safe</h3>\n            </Box>\n            <Calls calls={targetCalls} />\n        </>)}\n        {targetChanges && (<>\n            <Box sx={{ paddingTop: \"8px\" }}>\n                <h3>Storage Changes on target Safe</h3>\n            </Box>\n            <StorageChanges changes={targetChanges} />\n        </>)}\n        <Box sx={{ paddingTop: \"8px\" }}>\n            <h3>Logs</h3>\n        </Box>\n        <Logs logs={results.logs} />\n        <h3>Advanced Information</h3>\n        <Accordion>\n            <AccordionSummary>Click to show</AccordionSummary>\n            <AccordionDetails>\n                {otherCalls.length > 0 && (<>\n                    <Box sx={{ paddingTop: \"8px\" }}>\n                        <h3>Calls from other contracts</h3>\n                    </Box>\n                    {otherCalls.map((e) => <Accordion>\n                        <AccordionSummary>{e.target}</AccordionSummary>\n                        <AccordionDetails>\n                            <Calls calls={e.calls} />\n                        </AccordionDetails>\n                    </Accordion>)}\n                </>)}\n                <Box sx={{ paddingTop: \"8px\" }}>\n                    <h3>Call Tree</h3>\n                </Box>\n                <CallTree tree={results.callTree} />\n                {otherChanges.length > 0 && (<>\n                    <Box sx={{ paddingTop: \"8px\" }}>\n                        <h3>Storage Changes on other contracts</h3>\n                    </Box>\n                    {otherChanges.map((e) => <Accordion>\n                        <AccordionSummary>{e.target}</AccordionSummary>\n                        <AccordionDetails>\n                            <StorageChanges changes={e.changes} decode={false} />\n                        </AccordionDetails>\n                    </Accordion>)}\n                </>)}\n            </AccordionDetails>\n        </Accordion>\n    </>)\n}\n\nexport default SimulationResults","import { Accordion, AccordionDetails, AccordionSummary, Box, Button, Typography } from \"@mui/material\"\nimport { ethers } from \"ethers\"\nimport { ServiceMultisigTransaction } from \"../logic/service/types\"\n\nexport interface Props {\n    details: ServiceMultisigTransaction\n    onSelected?: (safeTxHash: string) => void\n}\n\nconst MultisigTx: React.FC<Props> = ({ details, onSelected }) => {\n    return (<Accordion>\n        <AccordionSummary>\n            <Box sx={{justifyContent: \"space-between\", flexDirection: \"row\", display: \"flex\", width: \"100%\", alignItems: \"center\"}}>\n                <Typography>{details.nonce} - {details.safeTxHash.slice(0, 10)}{ details.isExecuted && \" (Executed)\" }</Typography>\n                {onSelected && <Button onClick={() => onSelected(details.safeTxHash)}>Simulate</Button>}\n            </Box>\n        </AccordionSummary>\n        <AccordionDetails>\n            Hash: {details.safeTxHash}<br />\n            To: {details.to}<br />\n            Value: {ethers.utils.formatEther(details.value)}<br />\n            Data: <Typography sx={{\n                width: '100%',\n                textAlign: 'start',\n                wordWrap: 'break-word'\n            }}>{details.data}</Typography>\n            Operation: {details.operation}<br />\n            Nonce: {details.nonce}<br />\n            SafeTxGas: {details.safeTxGas}<br />\n            BaseGas: {details.baseGas}<br />\n            Gas Token: {details.gasToken}<br />\n            Gas Price: {details.gasPrice}<br />\n            Refund Receiver: {details.refundReceiver}<br />\n            Gas Token: {details.refundReceiver}<br />\n        </AccordionDetails>\n    </Accordion>)\n}\n\nexport default MultisigTx","import { eip1193Provider, getChainId as injectedChainId } from '../../logic/injected/ethereum';\nimport { useCallback, useEffect, useState } from 'react';\nimport { simulateTx, SimulationResult } from '../../logic/simulation/processor';\nimport { loadTxDetails } from '../../logic/service/details';\nimport { getChainId as safeAppsChainId, safeAppsProvider } from '../../logic/sapp/safeAppsSDK';\nimport SimulationResults from './SimulationResults'\nimport MultisigTx from '../MultisigTransaction';\nimport { CircularProgress, Switch } from '@mui/material';\nimport { ServiceMultisigTransaction } from '../../logic/service/types';\nimport { ethers } from 'ethers';\n\nexport interface Props {\n    safeTxHash: string,\n    connectedToSafe: boolean,\n}\n\ninterface Results {\n    target: string,\n    simulationResults: SimulationResult\n}\n\nconst Simulation: React.FC<Props> = ({ safeTxHash, connectedToSafe }) => {\n    const [runExecutionOnOriginalBlock, setRunExecutionOnOriginalBlock] = useState(true)\n    const [simulationProgress, setSimulationProgress] = useState(false)\n    const [safeTx, setSafeTx] = useState<ServiceMultisigTransaction | undefined>(undefined)\n    const [results, setResults] = useState<Results | undefined>(undefined)\n    const onSimulateTx = useCallback(async (safeTxHash: string, useLatestBlock: boolean) => {\n        try {\n            setSimulationProgress(true)\n            setResults(undefined)\n            setSafeTx(undefined)\n            const chainId = connectedToSafe ? await safeAppsChainId() : await injectedChainId()\n            const provider = connectedToSafe ? safeAppsProvider(chainId.toString()) : eip1193Provider()\n            const safeTx = await loadTxDetails(chainId.toString(), safeTxHash)\n            setSafeTx(safeTx)\n            let targetBlock: string | number = \"latest\"\n            if (!useLatestBlock) {\n                const executionTransactionHash = safeTx.transactionHash\n                const ethersProvider = new ethers.providers.Web3Provider(provider)\n                const executionTx = await ethersProvider.getTransaction(executionTransactionHash)\n                try {\n                    const preExecutionBlock = executionTx.blockNumber!! - 1\n                    await ethersProvider.getStorageAt(safeTx.safe, 0, preExecutionBlock)\n                    targetBlock = preExecutionBlock\n                } catch {\n                    console.log(\"Cannot access archive state\")\n                    setRunExecutionOnOriginalBlock(false)\n                }\n            }\n            const simulationResults = await simulateTx(provider, safeTx, targetBlock)\n            setResults({\n                target: safeTx.safe,\n                simulationResults\n            })\n        } catch (e) {\n            console.error(e)\n        } finally {\n            setSimulationProgress(false)\n        }\n    }, [connectedToSafe, setResults, setSimulationProgress, setSafeTx])\n\n    const handleBlockTargetChange = (useExecutionBlock: boolean) => {\n        setRunExecutionOnOriginalBlock(useExecutionBlock)\n    }\n\n    useEffect(() => {\n        if (simulationProgress) return\n        onSimulateTx(safeTxHash, !runExecutionOnOriginalBlock)\n    }, [safeTxHash, runExecutionOnOriginalBlock])\n    return (<>\n        <Switch checked={runExecutionOnOriginalBlock} onChange={(e) => handleBlockTargetChange(e.target.checked)} disabled={simulationProgress} />Use block of execution time<br />\n        {safeTx && (<>\n            <h3>Safe</h3>\n            {safeTx?.safe}\n            <h3>Transaction</h3>\n            <MultisigTx details={safeTx} />\n        </>)}\n        {results && (<SimulationResults results={results.simulationResults} />)}\n        {simulationProgress && <CircularProgress  sx={{ marginTop: \"24px\" }} />}\n    </>)\n}\n\nexport default Simulation","import Simulation from '../components/simulation/Simulation';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Button } from '@mui/material';\n\nexport interface Props {\n    connectedToSafe: boolean,\n}\n\nconst SimulationRoute: React.FC<Props> = ({ connectedToSafe }) => {\n    const params = useParams();\n    const navigate = useNavigate()\n    if (!params.safeTxHash) {\n        navigate(\"/\")\n        return <></>\n    }\n    return (<>\n        <Button onClick={() => navigate(\"/\")}>&lt; Back</Button><br />\n        <Simulation safeTxHash={params.safeTxHash} connectedToSafe={connectedToSafe} />\n    </>)\n}\n\nexport default SimulationRoute","import axios from \"axios\"\nimport { getServiceForChainId } from \"./register\"\nimport { Page, ServiceMultisigTransaction } from \"./types\"\n\nexport const loadMultisigTxs = async(chainId: string, safe: string, url?: string): Promise<Page<ServiceMultisigTransaction>> => {\n    const serviceUrl = getServiceForChainId(chainId)\n    const resp = await axios.get<Page<ServiceMultisigTransaction>>(url || `${serviceUrl}/api/v1/safes/${safe}/multisig-transactions/?limit=20`)\n    if (resp.status !== 200) throw Error(\"Could not load details\")\n    return resp.data\n}","import { useCallback, useEffect, useState } from 'react';\nimport { loadMultisigTxs } from '../../logic/service/list';\nimport { getChainId as safeAppsChainId } from '../../logic/sapp/safeAppsSDK';\nimport { getChainId as injectedChainId } from '../../logic/injected/ethereum';\nimport { Box, Button, CircularProgress } from '@mui/material';\nimport { ethers } from 'ethers';\nimport MultisigTx from '../MultisigTransaction';\nimport { useNavigate } from 'react-router-dom';\nimport { ServiceMultisigTransaction } from '../../logic/service/types';\n\nexport interface Props {\n    connectedToSafe: boolean\n    safe: string\n}\n\nconst TransactionList: React.FC<Props> = ({ safe, connectedToSafe }) => {\n    const navigate = useNavigate()\n    const [moreUrl, setMoreUrl] = useState<string | null>(null)\n    const [loading, setLoading] = useState<boolean>(false)\n    const [multisigTxs, setMultisigTxs] = useState<ServiceMultisigTransaction[]>([])\n    const loadMultisigTransactions = useCallback(async (safe: string, moreUrl?: string, txs?: ServiceMultisigTransaction[]) => {\n        setLoading(true)\n        try {\n            if (!txs) setMultisigTxs([])\n            const chainId = connectedToSafe ? await safeAppsChainId() : await injectedChainId()\n            // TODO: add EIP-3770 validation\n            const addressParts = safe.split(\":\")\n            const cleanSafe = ethers.utils.getAddress(addressParts[addressParts.length - 1])\n            const nextTxs = await loadMultisigTxs(chainId.toString(), cleanSafe, moreUrl)\n            setMoreUrl(nextTxs.next)\n            setMultisigTxs(txs ? txs.concat(nextTxs.results) : nextTxs.results)\n        } catch (e) {\n            console.error(e)\n        } finally {\n            setLoading(false)\n        }\n    }, [connectedToSafe, setMultisigTxs, setMoreUrl, setLoading])\n\n    useEffect(() => {\n        loadMultisigTransactions(safe)\n    }, [safe, loadMultisigTransactions])\n    return (<Box>\n        { multisigTxs.map((tx) => <MultisigTx details={tx} onSelected={(safeTxHash) => navigate(\"/\" + safeTxHash) } />) }\n        { !loading && moreUrl && <Button variant='text' onClick={() => loadMultisigTransactions(safe, moreUrl, multisigTxs)}>Load more</Button>}\n        { loading && <CircularProgress  sx={{ marginTop: \"24px\" }} />}\n    </Box>)\n}\n\nexport default TransactionList","import { Box, Button, TextField } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport TransactionList from '../components/transactions/TransactionList';\nimport { getSafeInfo } from '../logic/sapp/safeAppsSDK';\n\nexport interface Props {\n    connectedToSafe: boolean,\n}\n\nconst LAST_SAFE_STORAGE_KEY = \"SafeSimulator_Dashboard_LastSafe\"\n\nconst DashboardRoute: React.FC<Props> = ({ connectedToSafe }) => {\n    const [safe, setSafe] = useState(localStorage.getItem(LAST_SAFE_STORAGE_KEY))\n    const [safeTxHashInput, setSafeTxHashInput] = useState(\"\")\n    const navigate = useNavigate()\n    useEffect(() => {\n        (async () => {\n            if (!connectedToSafe) return\n            const safeInfo = await getSafeInfo()\n            setSafe(safeInfo.safeAddress)\n        })()\n    }, [connectedToSafe, setSafe])\n    const selectSafe = (safe: string) => {\n        localStorage.setItem(LAST_SAFE_STORAGE_KEY, safe)\n        setSafe(safe)\n    }\n    return (<Box>\n        <Box sx={{flexDirection: \"row\", display: \"flex\", alignItems: \"center\"}}>\n            {!connectedToSafe && <TextField label=\"Safe\" variant=\"standard\" value={safe} onChange={(e) => selectSafe(e.target.value)} sx={{ marginRight: \"16px\" }} />}\n            <TextField label=\"SafeTx Hash\" variant=\"standard\" value={safeTxHashInput} onChange={(e) => setSafeTxHashInput(e.target.value)} />\n            <Button onClick={() => navigate(\"/\" + safeTxHashInput)}>Simulate</Button>\n        </Box>\n        {safe && <TransactionList connectedToSafe={connectedToSafe} safe={safe} />}\n    </Box>)\n}\n\nexport default DashboardRoute","import './App.css';\nimport { useIsSafeApp } from './logic/sapp/hooks';\nimport { hasInjectedProvider } from './logic/injected/ethereum';\nimport { Route, Routes } from \"react-router-dom\";\nimport SimulationRoute from './routes/SimulationRoute';\nimport DashboardRoute from './routes/DashboardRoute';\n\nfunction App() {\n  const connectedToSafe = useIsSafeApp()\n  const hasProvider = hasInjectedProvider()\n  if (connectedToSafe === undefined) return <>\n    Loading...\n  </>\n  if (!connectedToSafe && !hasProvider) return <>\n    Only supported as Safe app or with injected provider\n  </>\n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route path=\":safeTxHash\" element={<SimulationRoute connectedToSafe={connectedToSafe} />} />\n        <Route path=\"*\" element={<DashboardRoute connectedToSafe={connectedToSafe} />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","import { useCallback, useEffect, useState } from \"react\"\nimport { checkIsSafeApp } from \"./safeAppsSDK\"\n\nexport const useIsSafeApp = (): boolean | undefined => {\n    const [isSafeApp, setIsSafeApp] = useState<boolean | undefined>()\n    \n    const checkSafeApp = useCallback(async () => {\n        setIsSafeApp(await checkIsSafeApp())\n    }, [setIsSafeApp])\n\n    useEffect(() => {\n        checkSafeApp()\n    }, [checkSafeApp])\n    return isSafeApp\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
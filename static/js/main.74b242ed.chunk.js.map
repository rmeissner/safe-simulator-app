{"version":3,"sources":["sapp/safeAppsSDK.ts","injected/ethereum.ts","simulation/processor.ts","service/register.ts","service/txDetails.ts","App.tsx","sapp/hooks.ts","reportWebVitals.ts","index.tsx"],"names":["appsSdk","SafeAppsSDK","sleep","timeout","value","Promise","cb","setTimeout","checkIsSafeApp","a","any","safe","getInfo","safeInfo","getChainId","chainId","safeAppsProvider","SafeAppProvider","safeAddress","parseInt","threshold","owners","eip1193Provider","window","ethereum","ethereumProvider","undefined","ethers","providers","Web3Provider","getNetwork","baseOptions","db_path","gasLimit","gasPrice","vmErrorsOnRPCResponse","logging","quiet","verbose","debug","buildSimulationEnv","provider","options","db","memdown","fork","network","Ganache","connector","GanacheCoreConnector","simulator","Simulator","buildAnalyzer","callHandler","CallHandler","storageHandler","StorageHandler","handlers","analyzer","HandlerAnalyzer","simulateTx","safeTx","simulationEnv","holder","infoProvider","SafeInfoProvider","loadInfo","simulateMultiSigTransaction","txHash","getTransactionReceipt","txReceipt","success","status","logs","callTree","roots","calls","storageChanges","availableServices","getServiceForChainId","service","toString","Error","loadTxDetails","safeTxHash","serviceUrl","axios","get","resp","data","App","useState","safeTxHashInput","setSafeTxHashInput","results","setResults","simulationProgress","setSimulationProgress","connectedToSafe","isSafeApp","setIsSafeApp","checkSafeApp","useCallback","useEffect","useIsSafeApp","hasProvider","onSimulateTx","safeAppsChainId","injectedChainId","simulationResults","target","console","error","className","Box","TextField","label","variant","onChange","e","CircularProgress","Button","onClick","sx","paddingTop","map","call","to","slice","change","slot","log","address","topics","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74b242ed.chunk.js","sourcesContent":["import SafeAppsSDK, { SafeInfo } from '@gnosis.pm/safe-apps-sdk';\nimport { SafeAppProvider } from '@gnosis.pm/safe-apps-provider';\n\nconst appsSdk = new SafeAppsSDK();\n\nconst sleep = <T>(timeout: number, value?: T) => new Promise<T | undefined>((cb) => setTimeout(() => cb(value), timeout))\n\nexport const checkIsSafeApp = async(): Promise<boolean> => {\n    const safeInfo = await Promise.any([appsSdk.safe.getInfo(), sleep(1000, false)])\n    return safeInfo !== false\n}\n\nexport const getSafeInfo = (): Promise<SafeInfo> => {\n    return appsSdk.safe.getInfo()\n}\n\nexport const getChainId = async(): Promise<number> => {\n    return (await getSafeInfo()).chainId\n}\n\nexport const safeAppsProvider = (chainId: string) => {\n    return new SafeAppProvider({ safeAddress: \"\", chainId: parseInt(chainId), threshold: 0, owners: [] }, appsSdk)\n}","import { ethers } from \"ethers\";\n\ndeclare let window: any;\n\nexport const hasInjectedProvider = () => !!window.ethereum\n\nexport const eip1193Provider = (): ethers.providers.ExternalProvider => {\n    return window.ethereum\n}\n\nlet ethereumProvider: ethers.providers.Web3Provider | undefined = undefined\nexport const ethersProvider = () => {\n    if (!ethereumProvider)\n        ethereumProvider = new ethers.providers.Web3Provider(eip1193Provider())\n    return ethereumProvider\n}\n\nexport const getChainId = async () => {\n    return (await ethersProvider().getNetwork()).chainId\n}","import { ethers } from 'ethers'\nimport memdown from 'memdown'\nimport Ganache from 'ganache-core'\nimport Simulator, { CallElement, CallHandler, EvmConnector, ExtendedCallParams, GanacheCoreConnector, HandlerAnalyzer, MultisigTransaction, SafeInfoProvider, StepHandler, StorageHandler } from '@rmeissner/safe-simulator'\n\nconst baseOptions: any = { db_path: \"/\", gasLimit: 100_000_000, gasPrice: \"0x0\", vmErrorsOnRPCResponse: false, logging: { quiet: true, verbose: false, debug: false } }\n\nconst buildSimulationEnv = (provider: any): SimulationEnv => {\n    const options = baseOptions\n    options.db = memdown()\n    options.fork = provider\n    const network = Ganache.provider(options)\n    const connector = new GanacheCoreConnector(network)\n    const simulator = new Simulator(connector)\n    return {\n        connector,\n        simulator\n    }\n}\n\nconst buildAnalyzer = () => {\n    const callHandler = new CallHandler()\n    const storageHandler = new StorageHandler()\n    const handlers: StepHandler[] = [\n        callHandler,\n        storageHandler\n    ]\n    const analyzer = new HandlerAnalyzer(handlers)\n    return {\n        analyzer,\n        callHandler,\n        storageHandler\n    }\n}\n\nexport interface SimulationEnv {\n    connector: EvmConnector,\n    simulator: Simulator\n}\n\nexport interface SimulationResult {\n    simulationEnv: SimulationEnv,\n    success: boolean,\n    logs: ethers.providers.Log[],\n    callTree: CallElement[],\n    calls: Map<string, ExtendedCallParams[]>,\n    storageChanges: Map<string, any[]>\n}\n\nexport const simulateTx = async (network: ethers.providers.ExternalProvider, safeTx: MultisigTransaction, simulationEnv?: SimulationEnv) => {\n    const holder: SimulationEnv = simulationEnv || buildSimulationEnv(network)\n    const provider = new ethers.providers.Web3Provider(holder.connector as any)\n    const infoProvider = new SafeInfoProvider(provider)\n    const safeInfo = await infoProvider.loadInfo(safeTx.safe)\n    const { analyzer, callHandler, storageHandler } = buildAnalyzer()\n    const txHash = await holder.simulator.simulateMultiSigTransaction(safeInfo, safeTx, analyzer)\n    const txReceipt = await provider.getTransactionReceipt(txHash)\n    return {\n        simulationEnv: holder,\n        success: txReceipt.status === 0 ? false : true,\n        logs: txReceipt.logs,\n        callTree: callHandler.roots,\n        calls: callHandler.calls,\n        storageChanges: storageHandler.storageChanges\n    }\n}","export const availableServices: Record<string, string> = {\n    \"1\": \"https://safe-transaction.mainnet.gnosis.io\",\n    \"4\": \"https://safe-transaction.rinkeby.gnosis.io\"\n}\n\nexport const getServiceForChainId = (chainId: string | number): string => {\n    const service = availableServices[chainId.toString()]\n    if (!service) throw Error(\"No service available\")\n    return service\n}","import axios from \"axios\"\nimport { MultisigTransaction } from \"@rmeissner/safe-simulator\"\nimport { getServiceForChainId } from \"./register\"\n\nexport const loadTxDetails = async(chainId: string, safeTxHash: string): Promise<MultisigTransaction> => {\n    const serviceUrl = getServiceForChainId(chainId)\n    const resp = await axios.get<MultisigTransaction>(`${serviceUrl}/api/v1/multisig-transactions/${safeTxHash}/`)\n    if (resp.status !== 200) throw Error(\"Could not load details\")\n    return resp.data\n}","import './App.css';\nimport { useIsSafeApp } from './sapp/hooks';\nimport { eip1193Provider, getChainId as injectedChainId, hasInjectedProvider } from './injected/ethereum';\nimport { Box, Button, TextField, CircularProgress } from '@mui/material';\nimport { useCallback, useState } from 'react';\nimport { simulateTx, SimulationResult } from './simulation/processor';\nimport { loadTxDetails } from './service/txDetails';\nimport { getChainId as safeAppsChainId, safeAppsProvider } from './sapp/safeAppsSDK';\n\ninterface Results {\n  target: string,\n  simulationResults: SimulationResult\n}\n\nfunction App() {\n  const [safeTxHashInput, setSafeTxHashInput] = useState(\"\")\n  const [results, setResults] = useState<Results | undefined>(undefined)\n  const [simulationProgress, setSimulationProgress] = useState(false)\n  const connectedToSafe = useIsSafeApp()\n  const hasProvider = hasInjectedProvider()\n  const onSimulateTx = useCallback(async (safeTxHash: string) => {\n    try {\n      setSimulationProgress(true)\n      const chainId = connectedToSafe ? await safeAppsChainId() : await injectedChainId()\n      const provider = connectedToSafe ? safeAppsProvider(chainId.toString()) : eip1193Provider()\n      const safeTx = await loadTxDetails(chainId.toString(), safeTxHash)\n      const simulationResults = await simulateTx(provider, safeTx)\n      setResults({\n        target: safeTx.safe,\n        simulationResults\n      })\n    } catch (e) {\n      console.error(e)\n    } finally {\n      setSimulationProgress(false)\n    }\n  }, [connectedToSafe, results, setResults, setSimulationProgress])\n  if (connectedToSafe === undefined) return <>\n    Loading...\n  </>\n  if (!connectedToSafe && !hasProvider) return <>\n    Only supported as Safe app or with injected provider\n  </>\n  return (\n    <div className=\"App\">\n      <Box>\n        <TextField label=\"SafeTx Hash\" variant=\"standard\" value={safeTxHashInput} onChange={(e) => setSafeTxHashInput(e.target.value)} />\n        {simulationProgress ?\n          <CircularProgress /> :\n          <Button onClick={() => onSimulateTx(safeTxHashInput)}>Simulate</Button>\n        }\n      </Box>\n      {results && (<>\n        <Box sx={{ paddingTop: \"24px\" }}>\n          <h3>Target Safe</h3>\n        </Box>\n        <Box>\n          {results.target}\n        </Box>\n        <Box sx={{ paddingTop: \"8px\" }}>\n          <h3>Calls</h3>\n        </Box>\n        <Box>\n          {results.simulationResults.calls.get(results.target)?.map((call) => (<>\n            {call.to} - {call.data.slice(0, 10)}<br />\n          </>))}\n        </Box>\n        <Box sx={{ paddingTop: \"8px\" }}>\n          <h3>Storage Changes</h3>\n        </Box>\n        <Box>\n          {results.simulationResults.storageChanges.get(results.target)?.map((change) => (<>\n            Slot <b>{change.slot}</b> to <b>{change.value}</b><br />\n          </>))}\n        </Box>\n        <Box sx={{ paddingTop: \"8px\" }}>\n          <h3>Logs</h3>\n        </Box>\n        <Box>\n          {results.simulationResults.logs.map((log) => (<>\n            Address <b>{log.address}</b><br />\n            Topic 0 <b>{log.topics[0]}</b>\n          </>))}\n        </Box>\n      </>)}\n    </div>\n  );\n}\n\nexport default App;\n","import { useCallback, useEffect, useState } from \"react\"\nimport { checkIsSafeApp } from \"./safeAppsSDK\"\n\nexport const useIsSafeApp = (): boolean | undefined => {\n    const [isSafeApp, setIsSafeApp] = useState<boolean | undefined>()\n    \n    const checkSafeApp = useCallback(async () => {\n        setIsSafeApp(await checkIsSafeApp())\n    }, [setIsSafeApp])\n\n    useEffect(() => {\n        checkSafeApp()\n    }, [checkSafeApp])\n    return isSafeApp\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}